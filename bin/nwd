#!/usr/bin/env node --harmony-destructuring --harmony-rest-parameters

'use strict';

const commander = require('commander');

const ProgressBar = require('progress');

const NWD = require('../');

commander.version(require('../package.json').version);

commander.command('*')
.action(() => commander.help());

commander.command('list')
.action(() => {

    NWD.GetVersionList((err, versions) => {

        if(err) {
            console.error(err);
            return;
        }

        console.dir(versions);

    });

});

commander.command('latest')
.action(() => {

    NWD.GetLatestVersion((err, version) => {

        if(err) {
            console.error(err);
            return;
        }

        console.dir(version);

    });

});

commander.command('stable')
.action(() => {

    NWD.GetStableVersion((err, version) => {

        if(err) {
            console.error(err);
            return;
        }

        console.dir(version);

    });

});

commander.command('download')
.option('-v,--version <version>')
.option('-p,--platform <platform>')
.option('-a,--arch <arch>')
.option('-f,--flavor <flavor>')
.action((command) => {

    var progressbar = null;

    NWD.DownloadBinary({
        version: command.version,
        platform: command.platform,
        arch: command.arch,
        flavor: command.flavor,
        progressCallback: (progress) => {

            if(!progressbar) {

                progressbar = new ProgressBar(':Name [:bar] :Speed :ETA', {
                    width: 20,
                    // Will be overwritten in progressCallback.
                    total: progress.size.total
                });

                console.log();

            }

            progressbar.curr = progress.size.transferred;

            progressbar.tick({
                Name: progress.file.name,
                Speed: (progress.speed / 1000).toFixed(2) + 'KB/s',
                ETA: progress.time.remaining ? progress.time.remaining.toFixed(2) + 's' : '-'
            });

        }
    }, (err, fromCache, path) => {

        if(err) {
            console.error(err);
            return;
        }

        // Fix ProgressBar output.
        console.log();
        console.log(fromCache ? 'Cached:' : 'Downloaded:', path);

    });

});

if(process.argv.length <= 2) {
    commander.help();
}

commander.parse(process.argv);
