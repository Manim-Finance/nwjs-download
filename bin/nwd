#!/usr/bin/env node --harmony-destructuring --harmony-rest-parameters

'use strict';

const commander = require('commander');

const NWD = require('../');

commander.version(require('../package.json').version);

commander.command('*')
.action(() => commander.help());

commander.command('list')
.action(() => {

    NWD.GetVersionList((err, versions) => {

        if(err) {
            console.error(err);
            return;
        }

        //console.dir(versions);

        for(let version of versions) {

            console.log();
            console.log('version:', version.version);
            console.log.apply(null, ['    targets:', ...version.files]);
            console.log.apply(null, ['    flavors:', ...version.flavors]);

        }

    });

});

commander.command('latest')
.action(() => {

    NWD.GetLatestVersion((err, version) => {

        if(err) {
            console.error(err);
            return;
        }

        console.dir(version);

    });

});

commander.command('stable')
.action(() => {

    NWD.GetStableVersion((err, version) => {

        if(err) {
            console.error(err);
            return;
        }

        console.dir(version);

    });

});

commander.command('download')
.option('-v,--version <version>')
.option('-p,--platform <platform>')
.option('-a,--arch <arch>')
.option('-f,--flavor <flavor>')
.action((command) => {

    var progressbar = null;

    NWD.DownloadBinary({
        version: typeof command.version == 'string' ? command.version : null,
        platform: command.platform,
        arch: command.arch,
        flavor: command.flavor,
        showProgressbar: true
    }, (err, fromCache, path) => {

        if(err) {
            console.error(err);
            return;
        }

        // Fix ProgressBar output.
        console.log();
        console.log(fromCache ? 'Cached:' : 'Downloaded:', path);

    });

});

if(process.argv.length <= 2) {
    commander.help();
}

commander.parse(process.argv);
